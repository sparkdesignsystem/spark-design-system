---
title: Class Naming Convention
---
<div class=" drizzle-o-Layout__section-header">
  <h1 class="drizzle-b-h1">Class Naming Convention</h1>
</div>

<div class="drizzle-o-Layout-content drizzle-b-LongFormText">
  <div class="drizzle-o-ContentGrouping">
    <p>The Spark Design System uses a strict class naming convention.
      This allows us to keep our classes flat, avoid conflicts, provide
      clarity, and improve legibility.</p>
    <p>This is done by combining 4 techniques:</p>
    <ul class="drizzle-b-List drizzle-b-List--nested">
      <li>a global namespace</li>
      <li>class prefixes</li>
      <li>pascal casing</li>
      <li>BEM syntax</li>
    </ul>
    <p>All classes in the Spark Design System must adhere to this naming
      convention.</p>
  </div>

  <div class="drizzle-o-ContentGrouping">
    <h2 class="drizzle-b-h2">Global Namespace</h2>
    <div class="drizzle-c-Command">
      <code class="drizzle-CodeHighlight">
        .sprk-
      </code>
    </div>

    <p>One of the most annoying things that happens when you use a CSS
      library is class naming conflicts. You already use the class
      `.button` and the library also uses it and it overrides your
      styles.</p>
    <p>To avoid this, the Spark Design System uses a global namespace
      to ensure that it's styles don't interfere with the custom
      styles in your app.</p>
  </div>

  <div class="drizzle-o-ContentGrouping">
    <h2 class="drizzle-b-h2">Class Prefixes</h2>
    <p>After the global namespace, each class name has a prefix which
      gives information about what the class is doing.</p>
    <p>The prefixes available are:</p>
    <ul class="drizzle-b-List drizzle-b-List--nested">
      <li class="sprk-u-mvm">
        <div class="drizzle-c-Command">
          <code class="drizzle-CodeHighlight">
            b-
          </code>
        </div>
        <span>(Base) For classes that add additional style to base HTML elements.</span>
      </li>
      <li class="sprk-u-mvm">
        <div class="drizzle-c-Command">
          <code class="drizzle-CodeHighlight">
            o-
          </code>
        </div>
        <span>(Object) Cosmetic-free design patterns that are very dangerous to change because they are often used
          in unrelated contexts. E.g. the OOCSS Media Object.</span>
      </li>
      <li class="sprk-u-mvm">
        <div class="drizzle-c-Command">
          <code class="drizzle-CodeHighlight">
            c-
          </code>
        </div>
        <span>(Component) Implementation-specific pieces of UI. CSS is safe to change because it is isolated to the
          specific component.</span>
      </li>
      <li class="sprk-u-mvm">
        <div class="drizzle-c-Command">
          <code class="drizzle-CodeHighlight">
            u-
          </code>
        </div>
        <span>(Utility) Highly specific, highly reusable, usually single purpose, and have high specificity.</span>
      </li>
      <li class="sprk-u-mvm">
        <div class="drizzle-c-Command">
          <code class="drizzle-CodeHighlight">
            is-
            has-
          </code>
        </div>
        <span>(State) These classes are typically added and removed through JavaScript or on the server to show
          specific states.</span>
      </li>
    </ul>
  </div>

  <div class="drizzle-o-ContentGrouping">
    <h2 class="drizzle-b-h2">Pascal Casing</h2>
    <p>After the namespace and prefix, the main part of the class name doesn't stand out very well. For this reason
      we use pascal case to visually separate it from the rest of the name. For example:</p>
    <div class="drizzle-c-Command">
      <code class="drizzle-CodeHighlight">
        .sprk-c-HighlightBoard__content
      </code>
    </div>
  </div>

  <div class="drizzle-o-ContentGrouping">
    <h2 class="drizzle-b-h2">Class Suffixes</h2>
    <p>Responsive suffix classes are used when you need styles to be applied at specific breakpoints. The `@` symbol
      must be escaped in the stylesheet. For example:</p>
    <div class="drizzle-c-Command">
      <code class="drizzle-CodeHighlight">
        .sprk-o-Flex\@xl
      </code>
    </div>

  </div>

  <div class="drizzle-o-ContentGrouping">
    <h2 class="drizzle-b-h2">BEM Syntax</h2>
    <p>BEM stands for "Block, Element, Modifier". It is a modular application development methodology whose naming
      convention has become very popular for writing modular, flat CSS selectors.</p>
    <p>The 3 parts of BEM are:</p>
    <ul class="drizzle-b-List drizzle-b-List--nested">
      <li class="sprk-u-mvm">
        <p class="drizzle-b-Label">Block</p>
        <p>The primary component block. In our convention it refers to the PascalCase part of the class.
          For example:</p>
        <div class="drizzle-c-Command">
           <code class="drizzle-CodeHighlight">
             .sprk-c-HighlightBoard
           </code>
        </div>
      </li>
      <li class="sprk-u-mvm">
        <p class="drizzle-b-Label">Element</p>
        <p>A child of the primary block. It is represented by two underscores that separate it form the Block.
          For example:</p>
        <div class="drizzle-c-Command">
           <code class="drizzle-CodeHighlight">
             .sprk-c-HighlightBoard__content
           </code>
        </div>
        <p>The following is not allowed:</p>
        <div class="drizzle-c-Command">
           <code class="drizzle-CodeHighlight">
             .sprk-c-HighlightBoard__content__child-content
           </code>
        </div>
      </li>
      <li class="sprk-u-mvm">
        <p class="drizzle-b-Label">Modifier</p>
        <p>A variation that extends either a Block or an Element. It is represented by two dashes that separate it
          from the Block or Element. For example:</p>
        <div class="drizzle-c-Command">
           <code class="drizzle-CodeHighlight">
             .sprk-c-HighlightBoard--jumbo
             .sprk-c-HighlightBoard__content--image
           </code>
        </div>
        <p>The following is not allowed:</p>
        <div class="drizzle-c-Command">
           <code class="drizzle-CodeHighlight">
             .sprk-c-HighlightBoard--jumbo--red
           </code>
        </div>
      </li>
    </ul>
  </div>

  <div class="drizzle-o-ContentGrouping">
    <h2 class="drizzle-b-h2">Resources</h2>
    <ul class="drizzle-b-List drizzle-b-List--nested">
      <li>
        <a href="http://bradfrost.com/blog/post/css-architecture-for-design-systems/"
           class="drizzle-b-Link">CSS Architecture for Design Systems</a>
      </li>
      <li>
        <a href="https://csswizardry.com/2015/03/more-transparent-ui-code-with-namespaces/"
           class="drizzle-b-Link">More transparent UI Code with Namespaces</a>
      </li>
      <li>
        <a href="https://github.com/suitcss/suit/blob/master/doc/naming-conventions.md#components"
           class="drizzle-b-Link">SUIT CSS Component Names</a>
      </li>
      <li>
        <a href="https://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/"
           class="drizzle-b-Link">MindBEMding – getting your head ’round BEM syntax</a>
      </li>
      <li>
        <a href="http://www.creativebloq.com/web-design/manage-large-css-projects-itcss-101517528"
           class="drizzle-b-Link">Managing Large CSS Projects with ITCSS</a>
      </li>
      <li>
        <a href="https://csswizardry.com/2015/08/bemit-taking-the-bem-naming-convention-a-step-further/"
           class="drizzle-b-Link">Responsive Suffixes</a>
      </li>
    </ul>
  </div>
</div>
